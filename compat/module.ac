# COMPAT_VAR___PROGNAME
# ---------------------
# Check if libc defines the __progname variable.
AC_DEFUN([COMPAT_VAR___PROGNAME], [
  AC_CACHE_CHECK([if libc defines __progname],
    [ac_cv_libc_defines___progname],
    [AC_TRY_LINK([],
      [
        extern char *__progname;
        printf("%s", __progname);
      ],
      [ac_cv_libc_defines___progname=yes],
      [ac_cv_libc_defines___progname=no]
    )]
  )
  if test "$ac_cv_libc_defines___progname" = "yes"; then
    AC_DEFINE([HAVE___PROGNAME], 1,
      [Define if libc defines the __progname variable])
  fi
])

# COMPAT_PROTO_MACRO(FUNCTION, HEADER, MACRO-LIST, [BODY])
# --------------------------------------------------------
# Determine which C preprocessor macro is needed to expose prototype of
# FUNCTION in HEADER.  First, we try with nothing special defined; then we
# try with each macro from MACRO-LIST.  We stop as soon as it's found
# and adjust $CFLAGS appropriately.
AC_DEFUN([COMPAT_PROTO_MACRO],
  [AC_CACHE_CHECK([what to define for $1 prototype],
    [compat_cv_proto_]$1[_macro],
    [AC_TRY_COMPILE(
      [
        #include <$2>
      ],
      [
	void *funcptr;
	$4
        funcptr = $1;
      ],
      [compat_cv_proto_]$1[_macro="none"],
      [for macro in $3; do
	AC_TRY_COMPILE(
	  [
	    #define $macro
	    #include <$2>
	  ],
	  [
	    void *funcptr;
	    $4
            funcptr = $1;
	  ],
	  [
	    compat_cv_proto_]$1[_macro="$macro"
	    break
	  ],
	  [compat_cv_proto_]$1[_macro="not found"]
	)
      done]
    )]
  )]
  if test -n "$compat_cv_proto_$1_macro" -a "$compat_cv_proto_$1_macro" != "not found" -a "$compat_cv_proto_$1_macro" != "none"; then
    CFLAGS="${CFLAGS} -D$compat_cv_proto_$1_macro";
  fi
)


# COMPAT_FUNC_STRTOK_R
# --------------------
# Check for working strtok_r().
AC_DEFUN([COMPAT_FUNC_STRTOK_R], [
  AC_DEFINE([NEED_STRTOK_R], 1,
            [Define if you want to use the strtok_r function])
  AC_REPLACE_FUNCS([strtok_r])
  COMPAT_PROTO_MACRO([strtok_r], [string.h], [_REENTRANT _THREAD_SAFE])
])


# COMPAT_FUNC_GETPWUID_R
# ----------------------
# Check for POSIX-compliant getpwuid_r().
AC_DEFUN([COMPAT_FUNC_GETPWUID_R], [
  COMPAT_PROTO_MACRO([getpwuid_r], [pwd.h],
    [_POSIX_PTHREAD_SEMANTICS _REENTRANT],
    [
      struct passwd pwd, *pwdp;
      char buf[10240];
      getpwuid_r(0, &pwd, buf, sizeof(buf), &pwdp);
    ]
  )
  if test "$compat_cv_proto_getpwuid_r_macro" != "not found"; then
    AC_DEFINE([HAVE_GETPWUID_R], 1,
	      [Define if your system has a POSIX-compliant getpwuid_r])
  else
    AC_MSG_WARN([cannot find usable getpwuid_r - resulting libraries will not be thread-safe])
  fi
])


# COMPAT_REPLACE_FUNC(function)
# -----------------------------
# Replacement for AC_REPLACE_FUNCS.
AC_DEFUN([COMPAT_REPLACE_FUNC], [
  AC_DEFINE([NEED_]translit($1,[a-z],[A-Z]), 1,
	    [Define if you want to use the ]$1[ function])
  AC_CHECK_FUNC($1,
    [AC_DEFINE([HAVE_]translit($1,[a-z],[A-Z]), 1,
	       [Define if you have the ]$1[ function])],
    [AC_LIBOBJ(]$1[)]
  )
])


# COMPAT_FUNC_STRLCPY
# -------------------
# Check for strlcpy().
AC_DEFUN([COMPAT_FUNC_STRLCPY], [
  COMPAT_REPLACE_FUNC([strlcpy])
])
